rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Profile Rules ---
    match /users/{userId} {
      // Allow any authenticated user to read any profile (for search, viewing others)
      allow read: if request.auth != null;
      // Allow a user to create, update, or delete ONLY their own profile document
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // --- Chat Rules ---
    match /chats/{chatId} {

      // Helper function to check if the current user is a participant in this chat
      function isParticipant() {
        // 'resource.data' refers to the existing document's data for read/update
        return request.auth != null && request.auth.uid in resource.data.users;
      }

      // Allow read or update of chat metadata if the user is a participant
      allow read, update: if isParticipant();

      // Allow creation of a new chat document if:
      // 1. User is authenticated.
      // 2. Their UID is in the 'users' array of the new document data.
      // 3. The 'users' array has exactly two UIDs.
      allow create: if request.auth != null &&
                       request.auth.uid in request.resource.data.users &&
                       request.resource.data.users.size() == 2 &&
                       request.resource.data.users[0] is string && // Ensure UIDs are strings
                       request.resource.data.users[1] is string &&
                       request.resource.data.createdAt == request.time; // Ensure server timestamp for creation

      // Disallow deleting entire chat threads for now
      allow delete: if false;

      // --- Messages Subcollection Rules (within each chat) ---
      match /messages/{messageId} {
        // Allow reading messages if user is a participant in the parent chat
        allow read: if request.auth != null &&
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;

        // Allow creating a message if:
        // 1. User is authenticated.
        // 2. The 'senderId' in the new message matches their UID.
        // 3. They are a participant in the parent chat.
        allow create: if request.auth != null &&
                         request.resource.data.senderId == request.auth.uid &&
                         request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users &&
                         request.resource.data.text is string && // Ensure message text exists
                         request.resource.data.createdAt == request.time; // Ensure server timestamp

        // Disallow updating or deleting individual messages for simplicity
        allow update, delete: if false;
      }
    }
    // --- End Chat Rules ---

    // --- Posts Collection Rules ---
    match /posts/{postId} {
      // Allow anyone to read posts (change to 'if request.auth != null;' for logged-in only)
      allow read: if true;

      // Allow authenticated users to create posts if essential fields are correct
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.imageUrl is string &&
                       request.resource.data.createdAt == request.time;

      // More granular update (allow non-owners to like, owner to edit - for future)
      allow update: if request.auth != null &&
                       request.resource.data.userId == resource.data.userId && // userId cannot change
                       request.resource.data.imageUrl == resource.data.imageUrl && // imageUrl cannot change
                       (
                         (request.auth.uid != resource.data.userId &&
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'likesCount'])) ||
                         (request.auth.uid == resource.data.userId /* && add other editable fields here */)
                       );

      // Allow users to delete ONLY their own posts
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    // --- END Posts Collection Rules ---
  }
}